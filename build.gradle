/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.2/userguide/java_library_plugin.html
 */
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.30'
    }
}

import org.yaml.snakeyaml.Yaml

plugins {
    id 'org.springframework.boot' version '2.6.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "com.palantir.docker" version "0.32.0"
    id 'java'
}

version = '0.0.1'

ext {
    dockerComposeRule = "1.7.0"
    fabric8MockVersion = "5.12.2"
    fabric8Version = "5.12.2"
    junitVersion = "4.12"
    lombokVersion = "1.18.22"
    minioVersion = "8.3.7"
    okhttp3Verdsion = "4.9.3"
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "io.fabric8:kubernetes-client:${fabric8Version}"
    implementation "io.minio:minio:${minioVersion}"
    implementation "com.squareup.okhttp3:okhttp:${okhttp3Verdsion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "javax.inject:javax.inject:1"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "com.palantir.docker.compose:docker-compose-rule-junit4:${dockerComposeRule}"
    implementation "io.fabric8:kubernetes-server-mock:${fabric8MockVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation "com.squareup.okhttp3:mockwebserver:4.8.0"
}

bootRun {
    dependsOn bootJar
    sourceResources sourceSets.main
    systemProperty 'spring.profiles.active', System.getProperty('spring.profiles.active') ?: 'local'
    systemProperty 'user.timezone', System.getProperty('user.timezone') ?: 'UTC'
}

docker {
    name "mstc/${project.name}:${project.version}"
    files bootJar.archiveFile
    buildArgs(['JAR_FILE': "${bootJar.archiveFileName.get()}"])
}

def composeOut(String action) {
    project.buildDir.mkdirs()
    new File("${project.buildDir.path}/docker-compose-${action}.out")
}

def auth() {
    def configYaml = new File("${project.projectDir.path}/src/test/resources/application.yaml")
    Yaml yaml = new Yaml()
    def config = yaml.load(configYaml.newInputStream())
    ['MINIO_USERNAME': config['minio']['user'], 'MINIO_PASSWORD': config['minio']['password']]
}

def helmExec(List<String> args) {
    def command = ["helm"]
    command.addAll(args)
    def process = new ProcessBuilder(command as String[]).inheritIO().start()
    process.waitFor()
}

task helmInstall() {
    doLast {
        helmExec(["install", "mstc-cloud-worker", "${project.projectDir.path}/charts/mstc-cloud-worker", "-n", "mstc-dev"])
        helmExec(["install", "mstc-work-queue", "${project.projectDir.path}/charts/rabbitmq", "-n", "mstc-dev"])
    }
}

task helmUninstall() {
    doLast {
        helmExec(["uninstall", "mstc-cloud-worker", "-n", "mstc-dev"])
        helmExec(["uninstall", "mstc-work-queue", "-n", "mstc-dev"])
    }
}

task helm() {
    dependsOn(helmUninstall, helmInstall)
}

clean.dependsOn(helmUninstall)

def composeExec(String action) {
    def command = ["docker-compose", "-f", "${project.projectDir.path}/src/test/resources/docker-compose.yml", "$action"]
    def pb = new ProcessBuilder(command as String[])
    pb.environment().putAll(auth() as Map<String, String>)
    pb.redirectOutput(ProcessBuilder.Redirect.appendTo(composeOut(action))).redirectErrorStream(true).start()
}

task composeUp() {
    doLast {
        composeExec("up")
    }
}

task composeDown() {
    doLast {
        composeExec("down")
    }
}

test {
    //dependsOn composeUp
    environment "MINIO_USERNAME", "mstc"
    environment "MINIO_PASSWORD", "shmystic"
    environment "WORK_QUEUE_HOST", "localhost"
    environment "WORK_QUEUE_PORT", "5672"
    environment "WORK_QUEUE_USER", "guest"
    environment "WORK_QUEUE_PASS", "guest"
    systemProperty "test.data.dir", "${project.projectDir.path}/src/test/data"
    systemProperty "test.download.dir", "${project.buildDir.path}/download"
    systemProperty "test.resources.dir", "${project.projectDir.path}/src/test/resources"
}


sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
